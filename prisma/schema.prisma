generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id                  Int             @id @default(autoincrement())
  sourceSite          String          @map("source_site") @db.VarChar(255)
  campaignId          String          @map("campaign_id") @db.VarChar(255)
  title               String
  description         String?
  thumbnailImage      String?         @map("thumbnail_image")
  detailUrl           String?         @map("detail_url")
  remainingDays       Int?            @map("remaining_days")
  applicationsCurrent Int?            @default(0) @map("applications_current")
  applicationsTotal   Int?            @default(0) @map("applications_total")
  rewardPoints        Int?            @default(0) @map("reward_points")
  category            String?         @db.VarChar(255)
  locationType        String?         @map("location_type") @db.VarChar(255)
  channels            String[]        @default([])
  raw_data_id         Int?
  extractedAt         DateTime?       @default(now()) @map("extracted_at") @db.Timestamptz(6)
  createdAt           DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  is_hidden           Boolean?        @default(false)
  is_invalid          Boolean?        @default(false)
  deadline            DateTime?       @db.Timestamptz(6)
  raw_crawl_data      raw_crawl_data? @relation(fields: [raw_data_id], references: [id], onUpdate: NoAction)

  @@unique([sourceSite, campaignId])
  @@index([category], map: "idx_campaigns_category")
  @@index([createdAt(sort: Desc)], map: "idx_campaigns_created_at")
  @@index([is_hidden, is_invalid], map: "idx_campaigns_data_quality")
  @@index([deadline], map: "idx_campaigns_deadline")
  @@index([remainingDays], map: "idx_campaigns_remaining_days")
  @@index([sourceSite], map: "idx_campaigns_source_site")
  @@map("campaigns")
}

model ExtractorVersion {
  id              Int       @id @default(autoincrement())
  version         String    @unique @db.VarChar(50)
  description     String?
  extractionLogic Json      @map("extraction_logic")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  isActive        Boolean?  @default(false) @map("is_active")

  @@map("extractor_versions")
}

model Region {
  id                                           Int         @id @default(autoincrement())
  code                                         String      @unique @db.VarChar(10)
  name                                         String      @db.VarChar(50)
  officialCode                                 String?     @map("official_code") @db.VarChar(10)
  level                                        Int         @default(1)
  createdAt                                    DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                    DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  sub_regions_sub_regions_parent_codeToregions SubRegion[] @relation("sub_regions_parent_codeToregions")
  subRegions                                   SubRegion[]

  @@index([code], map: "idx_regions_code")
  @@index([name], map: "idx_regions_name")
  @@map("regions")
}

model SubRegion {
  id                                       Int       @id @default(autoincrement())
  code                                     String    @unique @db.VarChar(10)
  name                                     String    @db.VarChar(100)
  parentCode                               String    @map("parent_code") @db.VarChar(10)
  officialCode                             String?   @map("official_code") @db.VarChar(10)
  regionId                                 Int       @map("region_id")
  createdAt                                DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  regions_sub_regions_parent_codeToregions Region    @relation("sub_regions_parent_codeToregions", fields: [parentCode], references: [code], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_regions_parent_code")
  region                                   Region    @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_regions_region_id")

  @@index([code], map: "idx_sub_regions_code")
  @@index([name], map: "idx_sub_regions_name")
  @@index([parentCode], map: "idx_sub_regions_parent_code")
  @@index([regionId], map: "idx_sub_regions_region_id")
  @@map("sub_regions")
}

model RegionSyncLog {
  id              Int       @id @default(autoincrement())
  lastSyncAt      DateTime  @map("last_sync_at") @db.Timestamptz(6)
  status          String    @db.VarChar(10)
  errorMessage    String?   @map("error_message")
  totalRegions    Int       @default(0) @map("total_regions")
  totalSubRegions Int       @default(0) @map("total_sub_regions")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([lastSyncAt], map: "idx_region_sync_logs_last_sync_at")
  @@index([status], map: "idx_region_sync_logs_status")
  @@map("region_sync_logs")
}

model raw_crawl_data {
  id          Int        @id @default(autoincrement())
  source_site String     @db.VarChar(255)
  source_url  String
  raw_html    String
  metadata    Json?      @default("{}")
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @default(now()) @db.Timestamptz(6)
  campaigns   Campaign[]

  @@index([created_at(sort: Desc)], map: "idx_raw_crawl_data_created_at")
  @@index([source_site], map: "idx_raw_crawl_data_source_site")
}

model EmailSubscriber {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique @db.VarChar(255)
  firstName           String?              @map("first_name") @db.VarChar(100)
  lastName            String?              @map("last_name") @db.VarChar(100)
  isActive            Boolean              @default(true) @map("is_active")
  subscriptionToken   String               @unique @map("subscription_token") @db.VarChar(255)
  unsubscribeToken    String               @unique @map("unsubscribe_token") @db.VarChar(255)
  subscriptionDate    DateTime             @default(now()) @map("subscription_date") @db.Timestamptz(6)
  lastEmailSentAt     DateTime?            @map("last_email_sent_at") @db.Timestamptz(6)
  emailFrequency      EmailFrequency       @default(DAILY) @map("email_frequency")
  timezone            String               @default("Asia/Seoul") @db.VarChar(50)
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  emailEvents         EmailEvent[]
  personalizationLogs PersonalizationLog[]
  preferences         UserPreference[]

  @@index([email])
  @@index([isActive])
  @@index([subscriptionDate])
  @@map("email_subscribers")
}

model UserPreference {
  id           Int             @id @default(autoincrement())
  subscriberId Int             @map("subscriber_id")
  category     String          @db.VarChar(255)
  preference   PreferenceLevel @default(NEUTRAL)
  isExplicit   Boolean         @default(false) @map("is_explicit")
  confidence   Float           @default(0.5)
  lastUpdated  DateTime        @default(now()) @map("last_updated") @db.Timestamptz(6)
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  subscriber   EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, category])
  @@index([subscriberId])
  @@index([category])
  @@index([preference])
  @@map("user_preferences")
}

model EmailEvent {
  id           Int             @id @default(autoincrement())
  subscriberId Int             @map("subscriber_id")
  messageId    String          @map("message_id") @db.VarChar(255)
  eventType    EmailEventType  @map("event_type")
  timestamp    DateTime        @db.Timestamptz(6)
  email        String          @db.VarChar(255)
  campaignId   String?         @map("campaign_id") @db.VarChar(255)
  url          String?
  reason       String?
  response     String?
  rawData      Json?           @map("raw_data")
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  subscriber   EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@index([subscriberId])
  @@index([eventType])
  @@index([timestamp])
  @@index([messageId])
  @@map("email_events")
}

model PersonalizationLog {
  id                   Int             @id @default(autoincrement())
  subscriberId         Int             @map("subscriber_id")
  algorithmVersion     String          @map("algorithm_version") @db.VarChar(50)
  recommendedCampaigns Json            @map("recommended_campaigns")
  personalizationScore Float           @map("personalization_score")
  factors              Json
  executionTime        Int             @map("execution_time")
  createdAt            DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  subscriber           EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@index([subscriberId])
  @@index([algorithmVersion])
  @@index([createdAt])
  @@map("personalization_logs")
}

enum EmailFrequency {
  DAILY
  WEEKLY
  TWICE_WEEKLY
  CUSTOM
}

enum PreferenceLevel {
  DISLIKE
  NEUTRAL
  LIKE
  LOVE
}

enum EmailEventType {
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  DROPPED
  SPAM_REPORTED
  UNSUBSCRIBED
  GROUP_UNSUBSCRIBED
  GROUP_RESUBSCRIBED
}
