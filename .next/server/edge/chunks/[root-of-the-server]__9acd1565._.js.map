{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/utils/logger.ts"],"sourcesContent":["/**\n * 환경변수 기반 로깅 시스템\n * \n * LOG_LEVEL 환경변수로 로깅 레벨을 제어:\n * - dev: 모든 로그 출력 (개발 환경)\n * - info: 정보성 로그와 에러 출력 (스테이징)\n * - error: 에러만 출력 (프로덕션)\n * - none: 로그 비활성화\n */\n\nconst LOG_LEVEL = process.env.NEXT_PUBLIC_LOG_LEVEL || process.env.LOG_LEVEL || 'error';\nconst IS_SERVER = typeof window === 'undefined';\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\n\n// 로그 레벨 우선순위\nconst LOG_LEVELS = {\n  none: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n  dev: 4,\n} as const;\n\ntype LogLevel = keyof typeof LOG_LEVELS;\n\n// 현재 로그 레벨 가져오기\nconst currentLogLevel = LOG_LEVELS[LOG_LEVEL as LogLevel] || LOG_LEVELS.error;\n\n// 민감한 정보 마스킹\nfunction maskSensitiveData(data: unknown): unknown {\n  if (typeof data !== 'object' || data === null) {\n    return data;\n  }\n\n  const sensitiveKeys = [\n    'password', 'secret', 'token', 'key', 'apikey', 'api_key',\n    'authorization', 'auth', 'credential', 'private'\n  ];\n\n  const masked = Array.isArray(data) ? [...data] : { ...data };\n\n  for (const key in masked) {\n    const lowerKey = key.toLowerCase();\n    \n    // 민감한 키인 경우 마스킹\n    if (sensitiveKeys.some(sensitive => lowerKey.includes(sensitive))) {\n      masked[key] = '[MASKED]';\n    } \n    // 객체인 경우 재귀적으로 처리\n    else if (typeof masked[key] === 'object' && masked[key] !== null) {\n      masked[key] = maskSensitiveData(masked[key]);\n    }\n  }\n\n  return masked;\n}\n\n// 로그 포맷팅\nfunction formatLog(level: string, message: string, data?: unknown): string {\n  const timestamp = new Date().toISOString();\n  const environment = IS_SERVER ? 'SERVER' : 'CLIENT';\n  \n  let formattedMessage = `[${timestamp}] [${environment}] [${level}] ${message}`;\n  \n  if (data !== undefined) {\n    const maskedData = IS_PRODUCTION ? maskSensitiveData(data) : data;\n    formattedMessage += ` ${JSON.stringify(maskedData, null, 2)}`;\n  }\n  \n  return formattedMessage;\n}\n\nexport const logger = {\n  /**\n   * 개발 환경 전용 로그\n   */\n  dev: (message: string, data?: unknown) => {\n    if (currentLogLevel >= LOG_LEVELS.dev) {\n      // eslint-disable-next-line no-console\n      console.log(formatLog('DEV', message, data));\n    }\n  },\n\n  /**\n   * 정보성 로그\n   */\n  info: (message: string, data?: unknown) => {\n    if (currentLogLevel >= LOG_LEVELS.info) {\n      // eslint-disable-next-line no-console\n      console.log(formatLog('INFO', message, data));\n    }\n  },\n\n  /**\n   * 경고 로그\n   */\n  warn: (message: string, data?: unknown) => {\n    if (currentLogLevel >= LOG_LEVELS.warn) {\n      console.warn(formatLog('WARN', message, data));\n    }\n  },\n\n  /**\n   * 에러 로그\n   */\n  error: (message: string, data?: unknown) => {\n    if (currentLogLevel >= LOG_LEVELS.error) {\n      console.error(formatLog('ERROR', message, data));\n    }\n  },\n\n  /**\n   * 성능 측정 로그 (개발 환경 전용)\n   */\n  time: (label: string) => {\n    if (currentLogLevel >= LOG_LEVELS.dev) {\n      // eslint-disable-next-line no-console\n      console.time(label);\n    }\n  },\n\n  timeEnd: (label: string) => {\n    if (currentLogLevel >= LOG_LEVELS.dev) {\n      // eslint-disable-next-line no-console\n      console.timeEnd(label);\n    }\n  },\n\n  /**\n   * 그룹 로그 (개발 환경 전용)\n   */\n  group: (label: string) => {\n    if (currentLogLevel >= LOG_LEVELS.dev) {\n      // eslint-disable-next-line no-console\n      console.group(label);\n    }\n  },\n\n  groupEnd: () => {\n    if (currentLogLevel >= LOG_LEVELS.dev) {\n      // eslint-disable-next-line no-console\n      console.groupEnd();\n    }\n  },\n};\n\n// 전역 에러 핸들러 (클라이언트 사이드)\nif (!IS_SERVER && IS_PRODUCTION) {\n  window.addEventListener('error', (event) => {\n    logger.error('Uncaught error', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n    });\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('Unhandled promise rejection', {\n      reason: event.reason,\n    });\n  });\n}\n\nexport default logger;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/rate-limit.ts"],"sourcesContent":["/**\n * Rate Limiting 유틸리티\n * IP 기반으로 API 요청을 제한합니다.\n */\n\nimport { NextResponse } from 'next/server';\nimport { logger } from '@/utils/logger';\n\n// Rate limit 데이터 저장\ninterface RateLimitData {\n  requests: number[];  // 요청 시간 배열\n  blocked?: number;    // 차단된 시간\n}\n\n// 메모리 저장소 (프로덕션에서는 Redis 권장)\nconst rateLimitStore = new Map<string, RateLimitData>();\n\n// Rate limit 설정\nexport interface RateLimitConfig {\n  limit: number;        // 최대 요청 수\n  windowMs: number;     // 시간 창 (밀리초)\n  skipSuccessfulRequests?: boolean;  // 성공한 요청만 카운트\n  skipFailedRequests?: boolean;      // 실패한 요청은 제외\n  message?: string;     // 커스텀 에러 메시지\n}\n\n// 기본 설정\nexport const DEFAULT_RATE_LIMIT: RateLimitConfig = {\n  limit: 60,           // 분당 60회\n  windowMs: 60 * 1000, // 1분\n  message: '너무 많은 요청이 있었습니다. 잠시 후 다시 시도해주세요.'\n};\n\n// API별 Rate Limit 설정\nexport const API_RATE_LIMITS: Record<string, RateLimitConfig> = {\n  '/api/sync-regions': {\n    limit: 1,\n    windowMs: 60 * 60 * 1000, // 1시간에 1회\n    message: '지역 동기화는 1시간에 한 번만 가능합니다.'\n  },\n  '/api/regions': {\n    limit: 100,\n    windowMs: 60 * 1000, // 분당 100회\n  },\n  '/api/dev': {\n    limit: 10,\n    windowMs: 60 * 1000, // 개발 API는 분당 10회\n  }\n};\n\n/**\n * Rate limit 체크\n */\nexport function checkRateLimit(\n  identifier: string,\n  pathname: string,\n  config?: RateLimitConfig\n): NextResponse | null {\n  const now = Date.now();\n  \n  // API별 설정 또는 기본 설정 사용\n  const rateLimitConfig = config || API_RATE_LIMITS[pathname] || DEFAULT_RATE_LIMIT;\n  const { limit, windowMs, message } = rateLimitConfig;\n  \n  // 식별자별 데이터 가져오기\n  const key = `${identifier}:${pathname}`;\n  const data = rateLimitStore.get(key) || { requests: [] };\n  \n  // 차단된 경우 체크\n  if (data.blocked && now - data.blocked < windowMs) {\n    const retryAfter = Math.ceil((data.blocked + windowMs - now) / 1000);\n    \n    logger.warn('Rate limit blocked', {\n      identifier,\n      pathname,\n      retryAfter\n    });\n    \n    return NextResponse.json(\n      {\n        error: {\n          code: 'RATE_LIMIT_EXCEEDED',\n          message: message || DEFAULT_RATE_LIMIT.message,\n          retryAfter\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': limit.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': new Date(data.blocked + windowMs).toISOString(),\n          'Retry-After': retryAfter.toString()\n        }\n      }\n    );\n  }\n  \n  // 시간 창 내의 요청만 필터링\n  const validRequests = data.requests.filter(time => now - time < windowMs);\n  \n  // 제한 초과 체크\n  if (validRequests.length >= limit) {\n    data.blocked = now;\n    rateLimitStore.set(key, data);\n    \n    const retryAfter = Math.ceil(windowMs / 1000);\n    \n    logger.warn('Rate limit exceeded', {\n      identifier,\n      pathname,\n      requests: validRequests.length,\n      limit\n    });\n    \n    return NextResponse.json(\n      {\n        error: {\n          code: 'RATE_LIMIT_EXCEEDED',\n          message: message || DEFAULT_RATE_LIMIT.message,\n          retryAfter\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': limit.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': new Date(now + windowMs).toISOString(),\n          'Retry-After': retryAfter.toString()\n        }\n      }\n    );\n  }\n  \n  // 요청 기록\n  validRequests.push(now);\n  rateLimitStore.set(key, { requests: validRequests });\n  \n  // Rate limit 헤더 추가 (정보 제공용)\n  const remaining = limit - validRequests.length;\n  \n  logger.dev('Rate limit check passed', {\n    identifier,\n    pathname,\n    used: validRequests.length,\n    limit,\n    remaining\n  });\n  \n  // null 반환시 요청 계속 진행\n  return null;\n}\n\n/**\n * 정리 함수 (오래된 데이터 제거)\n */\nexport function cleanupRateLimitStore(): void {\n  const now = Date.now();\n  const maxAge = 24 * 60 * 60 * 1000; // 24시간\n  \n  for (const [key, data] of rateLimitStore.entries()) {\n    const lastRequest = Math.max(...data.requests, data.blocked || 0);\n    \n    if (now - lastRequest > maxAge) {\n      rateLimitStore.delete(key);\n    }\n  }\n  \n  logger.dev('Rate limit store cleanup completed', {\n    remainingKeys: rateLimitStore.size\n  });\n}\n\n// 주기적 정리 (1시간마다)\nif (typeof window === 'undefined') {\n  setInterval(cleanupRateLimitStore, 60 * 60 * 1000);\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { checkRateLimit } from '@/lib/rate-limit';\nimport { logger } from '@/utils/logger';\n\n// API 라우트 체크\nfunction isAPIRoute(pathname: string): boolean {\n  return pathname.startsWith('/api/');\n}\n\n// 관리자 API 체크 (cron 제외)\nfunction isAdminAPIRoute(pathname: string): boolean {\n  return pathname.startsWith('/api/sync-regions') || \n         pathname.startsWith('/api/dev/');\n}\n\n// Cron API 체크\nfunction isCronAPIRoute(pathname: string): boolean {\n  return pathname.startsWith('/api/cron/');\n}\n\n// IP 주소 추출\nfunction getClientIp(request: NextRequest): string {\n  return request.headers.get('x-forwarded-for')?.split(',')[0] || \n         request.headers.get('x-real-ip') || \n         request.headers.get('cf-connecting-ip') ||\n         'unknown';\n}\n\nexport function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname;\n  \n  // API 라우트만 처리\n  if (!isAPIRoute(pathname)) {\n    return NextResponse.next();\n  }\n  \n  const ip = getClientIp(request);\n  \n  // Cron API는 자체 미들웨어에서 처리하므로 여기서는 제외\n  if (isCronAPIRoute(pathname)) {\n    return NextResponse.next();\n  }\n  \n  // 관리자 API 인증 체크\n  if (isAdminAPIRoute(pathname)) {\n    const adminApiKey = request.headers.get('x-api-key');\n    \n    // Admin API 키 인증\n    const hasValidApiKey = adminApiKey === process.env.ADMIN_API_KEY;\n    \n    // 프로덕션 환경에서는 인증 필수\n    if (process.env.NODE_ENV === 'production' && !hasValidApiKey) {\n      logger.warn('Unauthorized admin API access attempt', {\n        pathname,\n        ip,\n        userAgent: request.headers.get('user-agent')\n      });\n      \n      return NextResponse.json(\n        {\n          error: {\n            code: 'UNAUTHORIZED',\n            message: '권한이 없습니다.'\n          }\n        },\n        { status: 401 }\n      );\n    }\n  }\n  \n  // Rate limiting 체크\n  const rateLimitResult = checkRateLimit(ip, pathname);\n  \n  if (rateLimitResult) {\n    // Rate limit 초과시 에러 응답 반환\n    return rateLimitResult;\n  }\n  \n  // 정상 처리\n  const response = NextResponse.next();\n  \n  // CORS 헤더 추가 (필요시)\n  if (process.env.NODE_ENV === 'production') {\n    response.headers.set('X-Content-Type-Options', 'nosniff');\n    response.headers.set('X-Frame-Options', 'DENY');\n    response.headers.set('X-XSS-Protection', '1; mode=block');\n  }\n  \n  return response;\n}\n\nexport const config = {\n  matcher: '/api/:path*'\n};"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;AACA;;;;AAEA,aAAa;AACb,SAAS,WAAW,QAAgB;IAClC,OAAO,SAAS,UAAU,CAAC;AAC7B;AAEA,uBAAuB;AACvB,SAAS,gBAAgB,QAAgB;IACvC,OAAO,SAAS,UAAU,CAAC,wBACpB,SAAS,UAAU,CAAC;AAC7B;AAEA,cAAc;AACd,SAAS,eAAe,QAAgB;IACtC,OAAO,SAAS,UAAU,CAAC;AAC7B;AAEA,WAAW;AACX,SAAS,YAAY,OAAoB;IACvC,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,oBAAoB,MAAM,IAAI,CAAC,EAAE,IACrD,QAAQ,OAAO,CAAC,GAAG,CAAC,gBACpB,QAAQ,OAAO,CAAC,GAAG,CAAC,uBACpB;AACT;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IAEzC,cAAc;IACd,IAAI,CAAC,WAAW,WAAW;QACzB,OAAO,mWAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,MAAM,KAAK,YAAY;IAEvB,oCAAoC;IACpC,IAAI,eAAe,WAAW;QAC5B,OAAO,mWAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,gBAAgB;IAChB,IAAI,gBAAgB,WAAW;QAC7B,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC;QAExC,iBAAiB;QACjB,MAAM,iBAAiB,gBAAgB,QAAQ,GAAG,CAAC,aAAa;QAEhE,mBAAmB;QACnB;;IAiBF;IAEA,mBAAmB;IACnB,MAAM,kBAAkB,CAAA,GAAA,mIAAA,CAAA,iBAAc,AAAD,EAAE,IAAI;IAE3C,IAAI,iBAAiB;QACnB,0BAA0B;QAC1B,OAAO;IACT;IAEA,QAAQ;IACR,MAAM,WAAW,mWAAA,CAAA,eAAY,CAAC,IAAI;IAElC,mBAAmB;IACnB;;IAMA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;AACX"}}]
}